==10394== Memcheck, a memory error detector
==10394== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10394== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10394== Command: ../build/aarch64/bin/fcrn-camera
==10394== 
==10394== Warning: set address range perms: large range [0xc137000, 0x2074c000) (defined)
==10394== Warning: set address range perms: large range [0x206000000, 0x3f1440000) (noaccess)
==10394== Warning: set address range perms: large range [0x100a4f0000, 0x11f5930000) (noaccess)
==10394== Warning: set address range perms: large range [0x36000000, 0x55fff000) (noaccess)
==10394== Syscall param ioctl(generic) points to uninitialised byte(s)
==10394==    at 0x25626B1C: ioctl (ioctl.S:26)
==10394==    by 0x26F41753: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libnvrm_gpu.so)
==10394==    by 0x26F3C38B: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libnvrm_gpu.so)
==10394==    by 0x2629F017: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x26191633: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x261F7297: cuDeviceGetAttribute (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x256D5DBB: ??? (in /usr/local/cuda-10.0/targets/aarch64-linux/lib/libcudart.so.10.0.166)
==10394==  Address 0x1ffefff4cc is on thread 1's stack
==10394== 
==10394== Warning: noted but unhandled ioctl 0x4e04 with no size/direction hints.
==10394==    This could cause spurious value errors to appear.
==10394==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==10394== Conditional jump or move depends on uninitialised value(s)
==10394==    at 0x208AA378: cublasSetStream_v2 (in /usr/local/cuda-10.0/targets/aarch64-linux/lib/libcublas.so.10.0.166)
==10394== 
==10394== 
==10394== Process terminating with default action of signal 6 (SIGABRT): dumping core
==10394==    at 0x255904D8: raise (raise.c:51)
==10394==    by 0x255918B3: abort (abort.c:79)
==10394==    by 0x12B8EF: NearestNeighborUpsamplingPlugin::enqueue(int, void const* const*, void**, void*, CUstream_st*) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x4A88197: nvinfer1::rt::ExecutionContext::execute(int, void**) (in /usr/lib/aarch64-linux-gnu/libnvinfer.so.5.0.6)
==10394==    by 0x125827: void doInference<float>(nvinfer1::IExecutionContext&, float*, float*, unsigned long) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x1216E7: processImage(char const*, char const*, nvinfer1::IExecutionContext*, bool) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x121BC3: main (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)

valgrind: m_coredump/coredump-elf.c:495 (fill_fpu): Assertion 'Unimplemented functionality' failed.
valgrind: valgrind

host stacktrace:
==10394==    at 0x5803DBB0: ??? (in /usr/lib/valgrind/memcheck-arm64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 10394)
==10394==    at 0x255904D8: raise (raise.c:51)
==10394==    by 0x255918B3: abort (abort.c:79)
==10394==    by 0x12B8EF: NearestNeighborUpsamplingPlugin::enqueue(int, void const* const*, void**, void*, CUstream_st*) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x4A88197: nvinfer1::rt::ExecutionContext::execute(int, void**) (in /usr/lib/aarch64-linux-gnu/libnvinfer.so.5.0.6)
==10394==    by 0x125827: void doInference<float>(nvinfer1::IExecutionContext&, float*, float*, unsigned long) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x1216E7: processImage(char const*, char const*, nvinfer1::IExecutionContext*, bool) (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)
==10394==    by 0x121BC3: main (in /home/kmouraviev/fcrn-inference/build/aarch64/bin/fcrn-camera)

Thread 2: status = VgTs_WaitSys (lwpid 10949)
==10394==    at 0x2562504C: poll (poll.c:41)
==10394==    by 0x261DE707: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x262387B3: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x261E0ABB: ??? (in /usr/lib/aarch64-linux-gnu/tegra/libcuda.so.1.1)
==10394==    by 0x48C7087: start_thread (pthread_create.c:463)
==10394==    by 0x2562E4EB: thread_start (clone.S:78)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

